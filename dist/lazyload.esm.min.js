export default class{constructor(e){this.options={elements:".lazy",loadClass:"lazy-loading",loadedClass:"lazy-loaded",errorClass:"lazy-load-error",init:!0,...e},this.elements=this.getElements(),this.options.init&&this.init()}getElements(){let e=this.options.elements;return"string"==typeof e&&(e=document.querySelectorAll(e)),t=e,Array.isArray(t)?t:Array.prototype.slice.call(t);var t}createIntersectionObserver(){window.IntersectionObserver&&(this.intersectionObserver=new IntersectionObserver((e,t)=>{this.isIntersectingHandler(e,t)}))}updateIntersectionObserver(e){this.intersectionObserver&&e.forEach(e=>{e.classList.contains(this.options.loadedClass)||this.intersectionObserver.observe(e)})}resetIntersectionObserver(){this.intersectionObserver&&this.elements.forEach(e=>this.intersectionObserver.unobserve(e))}destroyIntersectionObserver(){this.resetIntersectionObserver(),delete this.intersectionObserver}isIntersectingHandler(e,t){const s=e.reduce((e,s)=>{var r,i;return s.isIntersecting&&(e.push(s.target),t.unobserve(s.target),this.elements=(r=this.elements,i=s.target,r.filter(e=>e!==i))),e},[]);this.loadImages(s)}loadImages(e){this.beforeLoad(e);const t=this.promiseMap(e);Promise.all(t).then(e=>{this.promiseStatusFilter(e)})}setSizesAttribute=e=>{e.dataset.sizes&&"auto"===e.dataset.sizes&&e.setAttribute("sizes",e.clientWidth+"px")};beforeLoad(e){e.forEach(e=>{e.classList.add(this.options.loadClass),this.setSizesAttribute(e)})}loadImage=e=>{let t=e;return new Promise((s,r)=>{e.dataset.src&&(t.src=e.dataset.src),t.dataset.srcset&&t.setAttribute("srcset",e.dataset.srcset),t.onload=()=>{s(t)},t.onerror=()=>{r(t)}})};promiseMap(e){return e.map(e=>this.loadImage(e).then(e=>({status:"fulfilled",value:e}),e=>({status:"rejected",reason:e})))}promiseStatusFilter(e){const t=[],s=[];e.forEach(e=>{"fulfilled"===e.status&&t.push(e.value),"rejected"===e.status&&s.push(e.reason)}),t.length&&this.afterSuccessfulLoad(t),s.length&&this.afterUnsuccessfulLoad(s)}afterSuccessfulLoad(e){e.forEach(e=>{e.classList.remove(this.options.loadClass),e.classList.add(this.options.loadedClass)})}afterUnsuccessfulLoad(e){e.forEach(e=>{e.classList.remove(this.options.loadClass),e.classList.add(this.options.errorClass)})}update(e){e?(this.elements=e,this.updateIntersectionObserver(e)):(this.elements=this.getElements(),this.updateIntersectionObserver(this.elements))}reset(){this.resetIntersectionObserver()}destroy(){this.destroyIntersectionObserver(),delete this.container,delete this.elements,delete this.options}init(){this.createIntersectionObserver(),this.updateIntersectionObserver(this.elements)}}
